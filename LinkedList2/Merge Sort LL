public class Solution {

    // For calculating the mid point of the linkedList 
    public static LinkedListNode<Integer> midPoint(LinkedListNode<Integer> head)
    {
        LinkedListNode<Integer> slow = head, fast = head;
        if(head == null)
            return head;
        while(fast.next != null && fast.next.next != null)
        {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;

    }

    // For Merging 2 sorted LinkedList 
    public static LinkedListNode<Integer> merge(LinkedListNode<Integer> head1, LinkedListNode<Integer> head2)
    {
        if(head1 == null)
            return head2;
        if(head2 == null)
            return head1;
        LinkedListNode<Integer> head, tail;
        LinkedListNode<Integer> t1 = head1, t2 = head2;
        if(t1.data < t2.data)
        {
            head = t1;
            tail = t1;
            t1 = t1.next;
        }
        else
        {
            head = t2;
            tail = t2;
            t2 = t2.next;
        }
        while(t1 != null && t2 != null)
        {
            if(t1.data < t2.data)
            {
                tail.next = t1;
                tail = tail.next;
                t1 = t1.next;
            }
            else
            {
                tail.next = t2;
                tail = tail.next;
                t2 = t2.next;
            }
        }
        if(t1 != null)
            tail.next = t1;
        else
            tail.next = t2;
        
        return head;
    }
    public static LinkedListNode<Integer> mergeSort(LinkedListNode<Integer> head) {
        // write your code here
        if(head == null || head.next == null)
            return head;

        LinkedListNode<Integer> mid = midPoint(head);
        LinkedListNode<Integer> left = head, right = mid.next;
        mid.next = null;
        LinkedListNode<Integer> p1Head = mergeSort(left);
        LinkedListNode<Integer> p2Head = mergeSort(right);
        LinkedListNode<Integer> finalHead = merge(p1Head, p2Head);
        return finalHead;
    }

}
